
1
00:00:02,077 --> 00:00:08,077
In this video, we're going to use our
example automaton for recognizing viable

2
00:00:08,077 --> 00:00:16,086
prefixes, to introduce one more idea, The
idea of a valid item. To refresh your

3
00:00:16,086 --> 00:00:20,056
memory, here's where we left off last
time. This is the complete

4
00:00:20,056 --> 00:00:25,062
nondeterministic automaton for recognizing
the viable prefixes of the example grammar

5
00:00:25,062 --> 00:00:30,051
[sound]. And Using the standard subset of
states construction, we can build a

6
00:00:30,051 --> 00:00:35,042
deterministic automaton that is equivalent
to the non-deterministic automaton. So

7
00:00:35,042 --> 00:00:40,039
here's the deterministic automaton that
recognizes exactly the same language. This

8
00:00:40,039 --> 00:00:44,069
automa, this deterministic automaton
notices the viable prefixes, of our

9
00:00:44,069 --> 00:00:49,066
example grammar. But now notice that each
state is a set of items. So there's a set

10
00:00:49,066 --> 00:00:54,068
of non-deterministic automaton states, in
each of these states. And recall that what

11
00:00:54,068 --> 00:00:59,053
that means is that the non-deterministic
automaton could be in any one of these

12
00:00:59,053 --> 00:01:06,021
states. And in particular, this state here
is the start state because it has the item

13
00:01:06,021 --> 00:01:13,002
S prime goes to dot E. The states of this
deterministic automaton are called

14
00:01:13,002 --> 00:01:17,085
variously cananugal collections of items
or the cananugal collections of LR zero

15
00:01:17,085 --> 00:01:22,087
items. If you look in the dragon book it
gives another way of constructing the LR

16
00:01:22,087 --> 00:01:28,001
zero items than the one that I gave. Mine
is somewhat simplified but I think also a

17
00:01:28,001 --> 00:01:32,077
little easier to understand if you are
seeing this for the first time. Now we

18
00:01:32,077 --> 00:01:40,004
need another definition. We'll say that a
given item is valid for a viable prefix

19
00:01:40,029 --> 00:01:46,045
alpha beta. If the following is true, that
beginning from the start symbol, this is

20
00:01:46,045 --> 00:01:53,017
our extra start symbol, and by a series of
right-most derivation steps, we can get to

21
00:01:53,017 --> 00:01:59,023
a configuration, alpha-x-omega, and then
in one step, x can go to beta-gamma. And,

22
00:01:59,045 --> 00:02:05,056
what this says is after parsing alpha and
beta, after seeing. Alpha and beta on the

23
00:02:05,056 --> 00:02:10,091
stack, the valid items are the possible
tops of the stack of items. That, that we

24
00:02:10,091 --> 00:02:15,028
could, that this item, could be the
determination state of the

25
00:02:15,028 --> 00:02:21,030
nondeterministic automaton. A simpler way
of explaining the same idea is that for a

26
00:02:21,030 --> 00:02:27,012
given viable prefix alpha the items that
are valid in that prefix are exactly the

27
00:02:27,012 --> 00:02:32,068
items that are in the final state of the
DFA after it reads that prefix. So these

28
00:02:32,068 --> 00:02:38,067
are the items that describe the state
after you've seen the stack alpha. Now, an

29
00:02:38,067 --> 00:02:45,043
item is often valid for many, many
prefixes. So, for example, the item T goes

30
00:02:45,043 --> 00:02:52,063
to open paren .e closed paren is valid for
all sequences of open parens. And to see

31
00:02:52,063 --> 00:02:57,062
that, We can just look at our automaton
and confirm that if we see an open paren,

32
00:02:57,062 --> 00:03:02,006
remember, this is the start state. So if
we see an open paren, we take this

33
00:03:02,006 --> 00:03:07,004
transition, we wind up in this state here.
And then every open paren we see, we just

34
00:03:07,004 --> 00:03:12,008
go round and round in this state. So if I
have a sequence of five open parens as my

35
00:03:12,008 --> 00:03:16,064
input, then I'll have transitions one,
two, three, four, five, all looping in

36
00:03:16,064 --> 00:03:22,047
this state. And notice that this item. Is,
in, is one of the items in that state. And

37
00:03:22,047 --> 00:03:28,006
that just says that this item is valid for
any prefix, or for, excuse me, any

38
00:03:28,006 --> 00:03:29,078
sequence of open parens.
