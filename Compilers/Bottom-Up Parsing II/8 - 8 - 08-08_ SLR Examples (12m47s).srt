
1
00:00:03,054 --> 00:00:11,090
In this video, we're gonna to work through
a couple of SLR parsing examples. So let's

2
00:00:11,090 --> 00:00:19,040
do a very simple example. Let's consider
the grammar. S goes to SA, or S goes to B.

3
00:00:19,040 --> 00:00:27,046
And what does this grammar do? It produces
strings of A's followed by a B. So any

4
00:00:27,046 --> 00:00:38,083
number of A's followed by a single B. And
notice that the grammar is left recursive,

5
00:00:38,083 --> 00:00:43,091
and recall that that's not a problem for a
bottom up parser. Slr parsers, LR parsers,

6
00:00:43,091 --> 00:00:48,075
are perfectly happy with left recursive
grammars. So let's begin by working out

7
00:00:48,075 --> 00:00:53,040
what the automaton for this, grammar
should be, what the parsing automaton

8
00:00:53,040 --> 00:00:58,048
should be. And recall that the first step
is to add a new production to the grammar.

9
00:00:58,048 --> 00:01:03,067
We have to add a new start symbol. That
all it does, it has one production that

10
00:01:03,067 --> 00:01:08,076
goes to the old start symbol. And that's,
again, just for technical reasons. Now,

11
00:01:08,076 --> 00:01:13,091
the start symbol, or sorry, the start
state of the NFA of the parsing automaton

12
00:01:13,091 --> 00:01:18,073
is this item. S prime, our new start
symbol, goes to dot S, our old start

13
00:01:18,073 --> 00:01:24,013
symbol. And rather than build the NFA, and
then do the subset of states construction.

14
00:01:24,013 --> 00:01:29,039
Let's just go ahead and work out what
items must be in the first state of the

15
00:01:29,039 --> 00:01:34,052
DFA. So remember that all the epsilon
moves in the, in the DF-, in the NFA, are

16
00:01:34,052 --> 00:01:39,078
due to moves that happen because we don't
see a non terminal on the stack. But

17
00:01:39,078 --> 00:01:44,088
instead see something derived from that
non terminal. So if we have a dot, Right

18
00:01:44,088 --> 00:01:49,071
next to a non terminal. That means that
there's an epsilon move in the NFA to all

19
00:01:49,071 --> 00:01:54,018
the items that have, for all the
productions, all the, all the first items,

20
00:01:54,036 --> 00:01:59,019
for the productions of that non terminal.
What do I mean by that? I mean that this

21
00:01:59,019 --> 00:02:04,001
state, I mean epsilon production to S goes
to dot SA. So this is the first item in

22
00:02:04,001 --> 00:02:08,096
recognizing, this production. So the dots
all the way at the left, And there would

23
00:02:08,096 --> 00:02:13,087
also be an item for the other production
for S, S goes to dot B. Alright, so that's

24
00:02:13,087 --> 00:02:19,000
the epsilon closure in the NFA of this
start item. So this'll be the first state.

25
00:02:19,000 --> 00:02:23,097
These three things, these three items
would be the first state of the DFA. And

26
00:02:23,097 --> 00:02:29,092
now we have to consider what would happen
on each of the possible transitions for

27
00:02:29,092 --> 00:02:35,050
each of the symbols that we might see on
the stack. So let's think about what

28
00:02:35,050 --> 00:02:41,081
happens if we see a B. So if we see a B on
the stack, then the only item that's going

29
00:02:41,081 --> 00:02:47,090
to be in that state is S goes to B dot
okay? So it'll be fine to see a B and this

30
00:02:47,090 --> 00:02:53,042
would be the only item that was valid for
the stack contents. Now another

31
00:02:53,042 --> 00:02:59,080
possibility is that we'll see an S. So, if
we see an S on the stack, what will

32
00:02:59,080 --> 00:03:09,006
happen? Well, we're going to go to a state
that has two items. S prime goes to S dot,

33
00:03:09,006 --> 00:03:17,011
so that we've seen S on the stack, and
we're ready to reduce by, by this

34
00:03:17,011 --> 00:03:24,045
production, possibly. And also, S goes to
S. A. And now, Clearly in this state let's

35
00:03:24,045 --> 00:03:29,027
talk about his state down here. There are
no more transitions possible. In all there

36
00:03:29,027 --> 00:03:34,015
is only one item in the state dots all the
way at the right hand side, so that state

37
00:03:34,015 --> 00:03:38,091
is completely done. In this state the one
over here on the right side. While one of

38
00:03:38,091 --> 00:03:43,078
these items is complete, the dot's all the
way at the right. But the other item still

39
00:03:43,078 --> 00:03:50,064
has an A, so there could be one more
transition out of this state. To the item,

40
00:03:50,064 --> 00:03:58,078
S goes to SA dot, Alright? And now if we
look at this, we see that for the most

41
00:03:58,078 --> 00:04:03,057
part these states are in pretty good
shape. So these two states this one down

42
00:04:03,057 --> 00:04:08,006
here and this one over here, they only
have a single item, and so there's no

43
00:04:08,006 --> 00:04:12,066
possibility of a shift reduce conflict in
those states. There's only one item,

44
00:04:12,066 --> 00:04:17,039
there's only one thing to do. The only
possibility here in both of these states

45
00:04:17,039 --> 00:04:22,080
is to reduce. This state, the initial
start state, has no reduce moves. So it's

46
00:04:22,080 --> 00:04:28,060
only shift moves here, so there can't be a
shift reduce conflict, because there are

47
00:04:28,060 --> 00:04:33,077
no reduce items, No possible reduce
actions. And there is to reduce, reduce

48
00:04:33,077 --> 00:04:39,050
conflicts for the same reason. The only
state of interest really for the point of

49
00:04:39,050 --> 00:04:45,030
view for what who the grammar is SLR1 is
this middle state. And here we can either

50
00:04:45,030 --> 00:04:51,049
reduce by s prime goes to s dot, or we
could shift and A onto the stack. And the

51
00:04:51,049 --> 00:04:58,068
question is, what is in the follow of S
prime? So what can follow S prime in the

52
00:04:58,068 --> 00:05:02,092
grammar? And if we look back up at our
grammar, we'll see that nothing can follow

53
00:05:02,092 --> 00:05:07,016
S prime. S prime is the start symbol, and
so, in fact, the only thing in the follow

54
00:05:07,016 --> 00:05:12,046
of S prime is the, And to the input. And
so what that tells us is that we'll reduce

55
00:05:12,046 --> 00:05:18,010
by s prime, goes to s, if, if we're out of
input. And otherwise if there is an A on

56
00:05:18,010 --> 00:05:23,054
the stack, sorry, if there's an a in the
input, then we'll shift it onto the stack.

57
00:05:23,054 --> 00:05:29,004
And so this grammar is, SLR1. There are no
shift reduce, or reduce, reduce conflicts

58
00:05:29,004 --> 00:05:36,054
implied by this parsing automaton. Let's
do another example, slightly more complex.

59
00:05:36,054 --> 00:05:41,079
In fact, let's just extend the previous
grammar. We'll have a, a production. S

60
00:05:41,079 --> 00:05:47,046
goes to SAS, okay? So now we have the non
terminal twice with an A in between, Or S

61
00:05:47,046 --> 00:05:52,092
can go to B, just like before. And now
let's work out the parsing automaton for

62
00:05:52,092 --> 00:06:00,012
this grammar. And, once again, We'll need
to add a dummy start symbol To the grammar

63
00:06:00,012 --> 00:06:04,088
And it will go. It's only production will
be to, generate the old start symbol. And

64
00:06:04,088 --> 00:06:09,059
now let's begin working out what's in the,
parsing automaton, for this particular

65
00:06:09,059 --> 00:06:13,095
grammar. And, and just like before, we're
not going to go through the effort of

66
00:06:13,095 --> 00:06:18,054
constructing, the NFA. That would be a
systematic way to do it. One way to it is,

67
00:06:18,054 --> 00:06:22,096
is the way we sketched. Was just to
construct the NFA first, and then do the

68
00:06:22,096 --> 00:06:27,067
subset of states construction. But, this
grammar is small enough. And simple enough

69
00:06:27,067 --> 00:06:32,079
that we can work out directly what is in,
what are in the states, what items are in

70
00:06:32,079 --> 00:06:37,085
the states of DFA. So just like before
because the dart here is immediately next

71
00:06:37,085 --> 00:06:42,091
to the S, we know that we can without
consuming any input at all make an epsilon

72
00:06:42,091 --> 00:06:48,040
transition in the interface to the items
that start the productions for S. So these

73
00:06:48,040 --> 00:06:54,045
will be in the, also in the DFA state. And
that's it. We can't add any other,

74
00:06:54,067 --> 00:07:00,052
productions here. So S is the only non
terminal. And we've added all the, first

75
00:07:00,052 --> 00:07:07,033
items, initial items for S. And so that is
the complete state. Okay? So just like

76
00:07:07,033 --> 00:07:13,027
before, one possibility is that we'll see
a B on the stack. And so that would give

77
00:07:13,027 --> 00:07:18,091
us the item S goes to B dot. And that's
the only item valid for that state.

78
00:07:18,091 --> 00:07:26,011
Another possibility is that we'll see an S
on the stack. Okay? In which case, we'll

79
00:07:26,011 --> 00:07:33,040
make a transition to the state, S prime
goes to S dot. And S goes to S dot AS,

80
00:07:33,040 --> 00:07:41,046
alright? So we saw that same state before,
in the, in the other automaton. Now we

81
00:07:41,046 --> 00:07:47,077
could also see an A. Now what state would
that take us to? And this is going to be a

82
00:07:47,077 --> 00:07:52,060
little different. In this state, we could
have the item, or will have the item, SA

83
00:07:52,060 --> 00:07:57,049
dot S, and I notice that the dot is right
next to S, so instead of seeing an S on

84
00:07:57,049 --> 00:08:02,008
the set, we could also see something
derived from S in the next position on

85
00:08:02,008 --> 00:08:07,022
this stack. And so we have to throw in all
the productions for S. There's only two of

86
00:08:07,022 --> 00:08:12,005
them. But that means we could have the
item S goes to dot SAS, and S goes to dot

87
00:08:12,005 --> 00:08:16,074
P. Alright, and then out of this state,
now there are a couple of different

88
00:08:16,074 --> 00:08:21,075
possible transitions, we could see an S or
we could see a B. Well, if we see a B,

89
00:08:21,075 --> 00:08:27,070
then we wind up in this state over here.
And if we see an S, Well, what's going to

90
00:08:27,070 --> 00:08:39,016
happen? If we see an S, then we'll wind up
in another new state. Where we have, S

91
00:08:39,016 --> 00:08:47,056
goes to SAS dot. We've seen the complete
right hand side of that production. Or S

92
00:08:47,056 --> 00:08:55,085
goes to SA.S. Actually, that dot's in the
wrong place, so let's erase that, and

93
00:08:55,085 --> 00:09:03,094
let's put it in the right place. It's
right here. Before the A, not after the A.

94
00:09:03,094 --> 00:09:08,085
Alright and now we have to think about
what happens in this state. So in this

95
00:09:08,085 --> 00:09:13,096
state the only possible input is an A and
if it isn't A, what's we going to have,

96
00:09:13,096 --> 00:09:19,007
we're going to have S goes to SA.S and
then we're gonna have to add the initial

97
00:09:19,007 --> 00:09:24,036
productions for S again. And so that would
just take us back to this state and like

98
00:09:24,036 --> 00:09:29,053
other transition labels too we go to this
state on an S and we come back to that

99
00:09:29,053 --> 00:09:34,099
state, the bottom state here for the top
state on an A. And I think if we hadn't

100
00:09:34,099 --> 00:09:39,077
made any mistakes that, that is the
complete transition system and all the

101
00:09:39,077 --> 00:09:45,014
states for this DFA. Now the question is,
is this , is this parsing automaton is it,

102
00:09:45,014 --> 00:09:50,026
this is, is this the parsing automaton of
a, a solar one grammar. And in order to

103
00:09:50,026 --> 00:09:55,050
answer that question we have to look for
possible reduce, reduce, and shift reduce

104
00:09:55,050 --> 00:10:00,067
conflict. Well a quick scan of all the
states here will show you or convince you

105
00:10:00,067 --> 00:10:05,051
that there are not. Any states, where
there are two possible reduce-moves. So

106
00:10:05,051 --> 00:10:10,099
there can't be any reduce reuse conflicts
in this, in this automaton. We can ignore

107
00:10:10,099 --> 00:10:16,041
states that only have a single item or
states that have no possible reduce-moves

108
00:10:16,041 --> 00:10:21,063
at all. Because, those are states in which
there cannot be a shift-reduce conflict

109
00:10:21,063 --> 00:10:26,065
and that means we can ignore these two
states. The two states over here at the

110
00:10:26,065 --> 00:10:32,001
extreme left. So now we're left with these
three states to think about. Alright, so

111
00:10:32,001 --> 00:10:38,043
we look at this state last time. As
before, the follow of S prime Is just

112
00:10:38,043 --> 00:10:47,050
equal to the dollar sign. And so there's
no shift reduce conflict in this state

113
00:10:47,050 --> 00:10:53,003
Because on, on input A we can only shift.
We can't reduce by S prime goes to S. All

114
00:10:53,003 --> 00:10:59,066
right, and now we're down looking at these
two states. And let's just consider this

115
00:10:59,066 --> 00:11:05,067
bottom state first. Alright, so what does
this state say to do? Well, this state

116
00:11:05,067 --> 00:11:11,043
says, that well first of all, observe.
That, the only transitions out of this

117
00:11:11,043 --> 00:11:16,046
state are on B and S and there are no
reduced moves in this state at all, so

118
00:11:16,046 --> 00:11:21,095
there's no possibility of a shift reduce
conflict in this state either. That leaves

119
00:11:21,095 --> 00:11:27,018
us with just this state to think about.
Now this state does have a reduced move,

120
00:11:27,018 --> 00:11:32,074
the first item here is a, is a reduction,
and that says that we should reduce by S

121
00:11:32,074 --> 00:11:38,016
goes to S A S if whatever comes next is in
the follow of S, so we're gonna need to

122
00:11:38,016 --> 00:11:44,019
know what's in the follow of S. Well from
S prime goes to S, we know that anything

123
00:11:44,019 --> 00:11:49,032
that's in the follow of S prime is in the
follow of S. So clearly dollar is in the

124
00:11:49,032 --> 00:11:54,033
follow of S. And then from this part of
the grammar here, we can see that A is in

125
00:11:54,033 --> 00:11:59,039
the follow of S. And then from this
occurrence here of S, we know that since

126
00:11:59,039 --> 00:12:03,048
it occurs at the, the far right side of
the production, that an ything in the

127
00:12:03,048 --> 00:12:07,079
follow of the right hand side, the left
hand side non terminal, is also gonna be

128
00:12:07,079 --> 00:12:12,026
in follow of S. Well, in this case they're
the same. It just says that the follow of

129
00:12:12,026 --> 00:12:16,073
S is a subset of the follow of S which is
trivially always true, and so it doesn't

130
00:12:16,073 --> 00:12:20,087
add anything new. And so we wind up with
just the follow of S being just two

131
00:12:20,087 --> 00:12:25,034
things, dollar sign and A. But that poses
a problem, because this says that if we

132
00:12:25,034 --> 00:12:31,002
see an A in the input we should reduce.
And this move here says that if we see an

133
00:12:31,002 --> 00:12:37,029
A in the input, we should shift. And so,
this state does have a shift-reduce

134
00:12:37,029 --> 00:12:45,013
conflict. Alright, and so this grammar is
not SLR what.
