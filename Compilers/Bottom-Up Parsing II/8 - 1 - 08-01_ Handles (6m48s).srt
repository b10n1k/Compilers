
1
00:00:02,072 --> 00:00:07,047
In this video, we're going to introduce
another important concept in bottom-up

2
00:00:07,047 --> 00:00:14,048
parsing, the notion of a handle. To
review, bottom up parsing is these two

3
00:00:14,048 --> 00:00:19,027
kinds of actions: we have shift moves,
which just read one token of input and

4
00:00:19,027 --> 00:00:24,037
move the vertical bar one to the right,
And reduced moves, which replace the right

5
00:00:24,037 --> 00:00:29,010
hand side of a production [inaudible] to
the left of the vertical bar by a

6
00:00:29,010 --> 00:00:34,008
production left hand side. So in this
case, the production must have been A goes

7
00:00:34,008 --> 00:00:39,094
to XY. And also reviewing what we did in
the last video, the left string can be

8
00:00:39,094 --> 00:00:44,036
implemented by a stack, where the top of
the stack is marked by the vertical bar.

9
00:00:44,036 --> 00:00:48,090
So shift pushes the terminal on to the
stack and reduce pops zero or more symbols

10
00:00:48,090 --> 00:00:53,016
of the stack, and that's gonna be the
right hand stack of some production. And

11
00:00:53,016 --> 00:00:57,059
then it's going to push one non-terminal
on to the stack which is the left hand

12
00:00:57,059 --> 00:01:03,091
side of that same production. And the key
question in bottom of parsing and the one

13
00:01:03,091 --> 00:01:08,084
we haven't addressed at all yet is how do
we decide when to shift and when to

14
00:01:08,084 --> 00:01:13,074
reduce. So let's take a look at this
example grammar. And let's think about a

15
00:01:13,074 --> 00:01:18,053
step of a parse where we've shifted one
token onto the stack. We have Nth on the

16
00:01:18,053 --> 00:01:23,044
stack, and then we have times N plus N
still to go that we haven't seen yet. Now

17
00:01:23,044 --> 00:01:28,059
at this point we could decide to reduce by
T goes to N because we have the production

18
00:01:28,059 --> 00:01:33,037
T goes to Nth right here. And so we could
then get into this particul-, potential

19
00:01:33,037 --> 00:01:38,022
state, or this particular state, where we
have T on the stack and then the rest of

20
00:01:38,022 --> 00:01:42,095
the input that looks like that. A-, but
you can see that this would be a mistake.

21
00:01:43,013 --> 00:01:48,031
There is no production in the grammar that
begins Hence T times. There's no

22
00:01:48,031 --> 00:01:55,015
production up here that looks like T
times. And therefore if we were to, to, to

23
00:01:55,015 --> 00:01:59,084
make this move, we would get stuck. We
could continue to do reductions, to

24
00:01:59,084 --> 00:02:04,072
rummage around in the string. But we would
never be able to get back to the start

25
00:02:04,072 --> 00:02:09,083
symbol. Because there is no way to deal a
sub string that has t times something in

26
00:02:09,083 --> 00:02:16,027
it. So what that shows us is that we don't
always want to reduce just because we have

27
00:02:16,027 --> 00:02:21,007
the right-hand side of a production on top
of the stack. To repeat that, even if

28
00:02:21,007 --> 00:02:25,057
there's the right-hand side of some
production sitting right there on top of

29
00:02:25,057 --> 00:02:30,037
the stack, it might be a mistake to do a
reduction. We might want to wait and do

30
00:02:30,037 --> 00:02:35,023
our reduction someplace else. And the idea
about how we decide is that we only want

31
00:02:35,023 --> 00:02:39,085
to reduce if the result can still be
reduced to the start symbol. So let's take

32
00:02:39,085 --> 00:02:44,070
a look at a right most innervations. So,
beginning with the start symbol, we get to

33
00:02:44,070 --> 00:02:49,062
some state after, after some number of
steps where that means, just an arbitrary

34
00:02:49,062 --> 00:02:54,080
number of steps. We get to some state X is
the right most non-terminal and then the

35
00:02:54,080 --> 00:02:59,060
next step is to replace X with by the
right hand side of some production. And

36
00:02:59,060 --> 00:03:04,040
remember, again, with bottom up parsing,
the parsers are actually going in this

37
00:03:04,040 --> 00:03:09,022
direction, okay. So, this is the reduction
direction. The derivation direction, the

38
00:03:09,022 --> 00:03:14,044
production direction, Because that's the
easiest way to talk about what strings are

39
00:03:14,044 --> 00:03:18,061
derived. We wanna begin with a start
symbol. But the [inaudible], but the

40
00:03:18,061 --> 00:03:23,031
parser's actually going against the flow
of these arrows. Anyway if this is a

41
00:03:23,031 --> 00:03:28,053
rightmost derivation Then we say that
alpha beta is a handle of alpha beta

42
00:03:28,053 --> 00:03:34,044
omega. And that just means that, yes, it
would be okay in this situation to reduce

43
00:03:34,044 --> 00:03:40,042
beta to X. And we could replace beta by X,
because it's not a mistake. We can still,

44
00:03:40,042 --> 00:03:46,040
by some sequence of moves, get back to the
start symbol. You know, by, by doing more

45
00:03:46,040 --> 00:03:52,010
reductions. So handles formulize the
intuition about where it is okay to do a

46
00:03:52,010 --> 00:03:57,025
reduction. A handle is just a reduction
that also allows further reduction back to

47
00:03:57,025 --> 00:04:02,027
the start symbol And we clearly only want
to do reduction at handles. If we do a

48
00:04:02,027 --> 00:04:07,049
reduction at a place that is not a handle
even though it looks like it's the right

49
00:04:07,049 --> 00:04:12,051
hand side or maybe actually be the right
hand side of some production, that does

50
00:04:12,051 --> 00:04:17,069
not mean. That it's actually a handle, and
we might, if we could reduce there, we may

51
00:04:17,069 --> 00:04:22,082
get stuck. So all we said so far is what a
handle is. We've defined, a handle, We

52
00:04:22,082 --> 00:04:27,094
haven't said anything about how to find
the handles. And actually, how we find the

53
00:04:27,094 --> 00:04:35,013
handles is gonna consume much of the rest
of our discussion of parsing. At this

54
00:04:35,013 --> 00:04:39,057
point we know enough to state The second
important fact about bottom- up parsing.

55
00:04:39,057 --> 00:04:43,095
So in shift reduce parsing handles appear
only at the top of the stack Never in

56
00:04:43,095 --> 00:04:47,095
sight Side, and in fact this is what
justifies using a stack because that

57
00:04:47,095 --> 00:04:52,061
string to the left of our focus point we
know that all the action will take place

58
00:04:52,061 --> 00:04:56,083
immediately to the left of the focus
point. We won't have to dive down to the

59
00:04:56,083 --> 00:05:01,091
string to look at its [inaudible] and
therefore the stack will be sufficient. So

60
00:05:01,091 --> 00:05:06,060
here's an informal proof, that handles
only appear at the top of the stack. And

61
00:05:06,060 --> 00:05:11,023
this is by induction on the number of
reduce moves. So this is true initially

62
00:05:11,023 --> 00:05:15,063
because the stack is empty. And so, we
don't, you know, so the only possible

63
00:05:15,063 --> 00:05:20,021
reduction is at the top of the stack if
there's an epsilon move, to make. And

64
00:05:20,021 --> 00:05:25,007
immediately after we reduce, the right
most non terminal is going to be on top of

65
00:05:25,007 --> 00:05:29,059
the stack. So immediately after we perform
a reduction, we have a, our stack, and

66
00:05:29,059 --> 00:05:34,028
then we have a, non terminal. And then our
vertical bar, And this is the right most

67
00:05:34,028 --> 00:05:42,041
non terminal. And since this is the right
most derivation that means that the next

68
00:05:42,041 --> 00:05:47,084
handle has to be somewhere to the right.
The next handle has to be, It has to

69
00:05:47,084 --> 00:05:52,002
include something that, and you know
possibly include some of this stuff. But

70
00:05:52,002 --> 00:05:56,037
it's either right here at the current
focus point, or it's to the right, Because

71
00:05:56,037 --> 00:06:01,004
we can't be doing any reductions to the
left of the rightmost non-terminal. And so

72
00:06:01,004 --> 00:06:05,050
it's gonna require a sequence of shift
moves to reach the next handle. So once we

73
00:06:05,050 --> 00:06:09,073
have this non-terminal on top of the
stack, it is by definition the rightmost

74
00:06:09,073 --> 00:06:14,013
non-terminal, and so the next handle has
to be somewhere to the right of that.

75
00:06:15,018 --> 00:06:19,049
Therefore in shift reduce parsing handles
always appear at the top of the stack.

76
00:06:19,066 --> 00:06:24,019
Handles are never to the left of the right
most knot terminal and this is why shift

77
00:06:24,019 --> 00:06:28,083
and reduce moves are sufficient. The shift
move only moves the vertical part to the

78
00:06:28,083 --> 00:06:33,037
right because we never need to move it
left. And bottom of parsing algorithms are

79
00:06:33,037 --> 00:06:37,080
based on recognizing handles. So as we saw
in the example at the beginning of this

80
00:06:37,080 --> 00:06:42,033
video. Just because you have a right hand
side on top of the stack that doesn't mean

81
00:06:42,033 --> 00:06:46,038
that it's a handle. And so we need to be
smarter about where we perform our
