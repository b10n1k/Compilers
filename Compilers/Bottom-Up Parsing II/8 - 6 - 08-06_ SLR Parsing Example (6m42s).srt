
1
00:00:03,004 --> 00:00:08,027
Welcome back, In this video, we're going
to do an extended example of SLR parsing.

2
00:00:09,092 --> 00:00:14,069
To review, here is the parsing automaton
for the grammar that we've been looking at

3
00:00:14,069 --> 00:00:19,065
in the last couple of videos. And this is
just the deterministic version of the, non

4
00:00:19,065 --> 00:00:23,091
deterministic automaton we built last
time. And I've just gone through and

5
00:00:23,091 --> 00:00:28,052
numbered all of the states. So let's take
a look at what happens when we parse the

6
00:00:28,052 --> 00:00:33,024
input [inaudible] times [inaudible]. And
just to review, we've appended dollar sign

7
00:00:33,024 --> 00:00:38,007
here to the end, to indicate where the end
of the input occurs. That's just an end of

8
00:00:38,007 --> 00:00:42,067
input marker. And because this is the
beginning of the parse we haven't seen any

9
00:00:42,067 --> 00:00:47,000
input yet. And so the vertical bar is all
the way at the left hand side of the

10
00:00:47,000 --> 00:00:52,079
input. So the machine begins in state one,
and there's nothing on the stack. The

11
00:00:52,079 --> 00:00:57,085
vertical bar is all the way to the left
again, so the stack is empty. So it just

12
00:00:57,085 --> 00:01:03,017
terminates in state one. And these are the
possible items, that are valid for the

13
00:01:03,017 --> 00:01:07,069
initial state of the parser. So among
those items, we see that there are two

14
00:01:07,069 --> 00:01:12,034
that tell us that it's okay to shift an
integer in this state. And, of course, the

15
00:01:12,034 --> 00:01:16,098
first input is an integer, and so there
are no reduced moves. All the other items

16
00:01:16,098 --> 00:01:21,068
in here also have their jobs all the way
at the left side of the item, so there's

17
00:01:21,068 --> 00:01:26,021
no possible reduced move in this state.
The only thing we could possibly do is

18
00:01:26,021 --> 00:01:31,055
shift, and it's okay to shift an integer.
So to summarize, on the initial

19
00:01:31,055 --> 00:01:36,051
configuration of the parser, the DFA halts
in state one, it never even gets out of

20
00:01:36,051 --> 00:01:41,010
state one, so it starts there and ends
there without even reading any input

21
00:01:41,010 --> 00:01:45,093
because the stack is empty and the action
that, that state tells us to do is to

22
00:01:45,093 --> 00:01:50,089
shift. So that leads us in the following
state, there's an int on the stack and we

23
00:01:50,089 --> 00:01:56,058
have a times coming up on the input. So,
what happens in that situation? Well, we

24
00:01:56,058 --> 00:02:01,016
begin. The automaton is going to read the
stack. So, starting from the bottom of the

25
00:02:01,016 --> 00:02:06,024
stack, we're in the start state. And then
we read an int, there's an int on the

26
00:02:06,024 --> 00:02:11,090
stack, and we win d up in this state. And
what does this state tell us we can do?

27
00:02:11,090 --> 00:02:17,043
Well, it tells us one possibility is to
reduce by T goes to int. But again, we

28
00:02:17,043 --> 00:02:23,060
will only do that, if the following input
is in the follow of T, And times, which is

29
00:02:23,060 --> 00:02:29,045
the next input item, is not in the follow
of T. So times is not in the follow. Of T

30
00:02:29,045 --> 00:02:34,071
and so reducing here is not a possibility.
That leaves only the other item to

31
00:02:34,071 --> 00:02:40,003
consider and here we see that this item
says we can the time. So if the times the

32
00:02:40,003 --> 00:02:45,051
next thing in input, which it is, it's
okay to shift. So the DFA halts in state

33
00:02:45,051 --> 00:02:50,079
three and because there's a times in the
input the move is to shift. And that puts

34
00:02:50,079 --> 00:02:55,077
us into this configuration where we have
int and times on the stack. Times is at

35
00:02:55,077 --> 00:03:01,023
the top of the stack, int is below it and
we have an int coming up in the input. So

36
00:03:01,023 --> 00:03:06,067
what happens now, again, the DFA is going
to read the entire stack. So beginning at

37
00:03:06,067 --> 00:03:10,024
the bottom of the stack, the first thing
it sees is an int, and it moves to that

38
00:03:10,024 --> 00:03:15,015
state. And then it sees a times, and so it
moves to this state. And now, in this

39
00:03:15,015 --> 00:03:19,066
particular state, what are the
possibilities? Well, we can see, first of

40
00:03:19,066 --> 00:03:24,082
all, that there are no reduced moves.
There are no items with the dot all the

41
00:03:24,082 --> 00:03:29,065
way at the right end. So the only
possibility is a, is a shift. And we could

42
00:03:29,065 --> 00:03:34,074
shift if the upcoming input's a open
paren, which it's not. More usefully, we

43
00:03:34,074 --> 00:03:40,003
could shift if the upcoming input is an
[inaudible], which is exactly what we see.

44
00:03:40,056 --> 00:03:45,049
So, the DFA terminates in state eleven,
and the move in that state is to shift.

45
00:03:45,049 --> 00:03:50,068
And that puts us into this state, where we
have int times int on the stack, and we

46
00:03:50,068 --> 00:03:57,026
are out of input. We are at the end of the
input. So let's see what happens on the

47
00:03:57,026 --> 00:04:04,048
stack int times int. The automaton reads
it int times int and it winds up back in

48
00:04:04,048 --> 00:04:10,040
state three. Sa3 tells us that we can
shift if the, next input item is a times

49
00:04:10,040 --> 00:04:16,073
and which it is not. Or we can reduce, if
whatever the next. Is in the next input is

50
00:04:16,073 --> 00:04:22,047
in the follow of T. And in fact dollar is
in, the follow of T. So, in, the end of

51
00:04:22,047 --> 00:04:28,065
the input come after a T on the stack. And
that means it's fine to reduce by T goes

52
00:04:28,065 --> 00:04:35,007
to int. So, once we do that, once we do
the reduction T goes to int, we wind up in

53
00:04:35,007 --> 00:04:41,006
the state times T. That's our stack
contents and of course we're still at the

54
00:04:41,006 --> 00:04:45,095
end of the input. So once again the DFA is
going to read the entire stack contents

55
00:04:45,095 --> 00:04:50,051
from the bottom to the top. First it reads
the int at the bottom of the stack, then

56
00:04:50,051 --> 00:04:54,085
it sees the times. And then it finally
reads the t at the top of the stack. And

57
00:04:54,085 --> 00:04:59,012
it winds up in a new state, state four.
And the interesting thing about this

58
00:04:59,012 --> 00:05:03,076
particular step is that the DFA took a
different path through the state graph

59
00:05:03,076 --> 00:05:08,035
than it did the previous time. And that's
because the stack contents changed. We

60
00:05:08,035 --> 00:05:13,000
didn't just add stuff to the stack, and so
we didn't extend the previous path. We

61
00:05:13,000 --> 00:05:17,077
actually replaced some symbols or a symbol
on the stack with a new symbol, in this

62
00:05:17,077 --> 00:05:22,065
case, the non-terminal T and that caused
the DFA to take a different path. Now what

63
00:05:22,065 --> 00:05:27,047
does this item in state four tell us to
do? Well it says that we can reduce by T

64
00:05:27,047 --> 00:05:32,021
goes to N times T if whatever. Follows in
the input is in the follow of T. And, once

65
00:05:32,021 --> 00:05:36,082
again, dollar is in the follow of T. And
so we'll do that reduction, and now we're

66
00:05:36,082 --> 00:05:40,091
left with the static contents just
consisting of T. And, of course we're

67
00:05:40,091 --> 00:05:45,057
still at the end of the input. And let's
see what happens now. So now of course the

68
00:05:45,057 --> 00:05:50,031
contents of the stack have changed even
more radically and so the DFA just goes

69
00:05:50,031 --> 00:05:55,000
off in a completely different direction.
It reads T winds up in this state and this

70
00:05:55,000 --> 00:05:59,046
state says we can either shift a plus if
there's a plus in the input. And again,

71
00:05:59,046 --> 00:06:04,010
there's no more input. Or we can reduce by
E goes to T if dollar, if the end of the

72
00:06:04,010 --> 00:06:08,073
input is in the follow of E, Which it is.
And so the reduction will be the one that

73
00:06:08,073 --> 00:06:13,065
we do. And now we have, this stack
contents, consisting only of E. Let's see

74
00:06:13,065 --> 00:06:18,063
what happens in that situation. Now we
make a transition to this state, state

75
00:06:18,063 --> 00:06:23,068
two. And we only have one item, S prime
goes to E dot. And so this is a reduced

76
00:06:23,068 --> 00:06:28,053
move. And again, dollar is in the follow
of S prime, ' cause that is the start

77
00:06:28,053 --> 00:06:33,057
symbol. And since that is the start
symbol, we accept at this point. So once

78
00:06:33,057 --> 00:06:38,042
we get to that item as our, reduce move,
we know that the input has been

79
00:06:38,042 --> 00:06:39,074
successfully parsed.
