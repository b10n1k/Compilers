
1
00:00:03,077 --> 00:00:08,065
Welcome back. In this video, we're going
to talk about converting nondeterministic

2
00:00:08,065 --> 00:00:16,085
finite automata into deterministic finite
automata. Here again is our little diagram

3
00:00:16,085 --> 00:00:22,004
of the pipeline of a lexical analyzer, how
one is constructed. So beginning with the

4
00:00:22,004 --> 00:00:26,072
lexical specification, we write our
regular expressions. Last time we talked

5
00:00:26,072 --> 00:00:31,065
about the step, the conversion of regular
expressions and the non-deterministic

6
00:00:31,065 --> 00:00:36,083
finite automata and this time we're going
to talk about this step. And as you might

7
00:00:36,083 --> 00:00:41,083
guess in the final video in the series
we'll talk about the final step which is

8
00:00:41,083 --> 00:00:47,086
the implementation of DFA's. So here's the
Nondeterministic Finite Automata and we

9
00:00:47,086 --> 00:00:52,082
finished up with last time. And, the first
thing we're gonna discuss today is an

10
00:00:52,082 --> 00:00:57,057
important idea called the Epsilon Closure
of a state. And the basic idea of the

11
00:00:57,057 --> 00:01:02,056
epsilon culture is that I pick the states.
And it could a set of states but we'll

12
00:01:02,056 --> 00:01:08,037
just do it for a single state. And then I
look at all the states that I can reach by

13
00:01:08,037 --> 00:01:13,097
following only epsilon moves. And so b is
the state that we're starting with so b

14
00:01:13,097 --> 00:01:19,036
would be included in the set and then
there's an epsilon move to c. So c would

15
00:01:19,036 --> 00:01:25,017
be included in the set and there's another
epsilon move to d so d would be included

16
00:01:25,017 --> 00:01:30,070
in the set. So we would say, the epsilon
closure of b is = the set b c d. And let's

17
00:01:30,070 --> 00:01:37,049
do one more as an example. Want to take
the epsilon closure of g. And when we

18
00:01:37,049 --> 00:01:44,036
switch colors up to this one, I'll erase
that and to this one in pink, Our

19
00:01:44,036 --> 00:01:49,051
purple-ish pink. So the epsilon closure of
g, we always have to follow all the

20
00:01:49,051 --> 00:01:54,085
epsilon transitions out of g. So, h would
be in the epsilon closure of g but it's

21
00:01:54,085 --> 00:02:00,006
not just single epsilon move. This is
recursive. So any number of epsilon moves

22
00:02:00,006 --> 00:02:05,041
that I can take, all of those states are
included in the epsilon closure of g. So,

23
00:02:05,041 --> 00:02:11,089
in fact, i would also be included. A would
be included and b and c and d will also be

24
00:02:11,089 --> 00:02:18,022
included And now, if I look at all of
these states that have been colored in the

25
00:02:18,022 --> 00:02:25,077
light purple color. I can see that I can't
reach any new states from those states

26
00:02:25,077 --> 00:02:33,047
using only epsilon moves and so the
epsilon closure of g would be equal to and

27
00:02:33,047 --> 00:02:44,060
[inaudible] out here it's a, b, c, d. Ghi.
Okay. So that is the epsilon closure of a

28
00:02:44,060 --> 00:02:51,097
state. Recall from the last video that an
NFA maybe in many states any given point

29
00:02:51,097 --> 00:02:57,012
in time that is because of the choices it
can make for a given input and NFA may

30
00:02:57,012 --> 00:03:02,015
reach multiple different states. And the
question we want to address now is how

31
00:03:02,015 --> 00:03:07,017
many different states can it be in? Well
if a non-deterministic automaton has n

32
00:03:07,017 --> 00:03:13,005
states. And it winds up in some subset of
those states as how big can that subset b

33
00:03:13,005 --> 00:03:18,099
will clearly the cardinality of that said
has to be less than or equal to n. So the

34
00:03:18,099 --> 00:03:24,064
NFA can get into a most and different
states. Now instead, I want to know the

35
00:03:24,064 --> 00:03:30,064
number of different subsets, well how many
different subsets are there of any things.

36
00:03:30,064 --> 00:03:36,013
Well that means there are two to the n -
one possible subsets of n states. And

37
00:03:36,013 --> 00:03:41,068
there's something very interesting about
this number. First of all it's a very big

38
00:03:41,068 --> 00:03:46,055
number so clearly the NFA can get into
lots of different configurations

39
00:03:46,055 --> 00:03:52,009
particularly one it has a lot of different
states but the important thing is that

40
00:03:52,009 --> 00:04:03,052
this is a finite set of possible
configurations. And this is going to give

41
00:04:03,052 --> 00:04:09,029
us the seed of the idea. For converting an
NFA into a DFA or Deterministic Automata

42
00:04:09,029 --> 00:04:15,010
because all we have to be able to do to
convert a Nondeterministic Automata into

43
00:04:15,010 --> 00:04:20,037
Deterministic Automata is come up with a
way for the Deterministic Automata to

44
00:04:20,037 --> 00:04:25,037
simulate for the [inaudible] of the
Nondeterministic Automata and the fact

45
00:04:25,037 --> 00:04:29,098
that the Nondeterministic Automata can
only get into a finite set of

46
00:04:29,098 --> 00:04:35,019
configurations even that configurations is
very large, is exactly what we will

47
00:04:35,019 --> 00:04:41,046
exploit in the construction. Now we're
ready to give the construction showing how

48
00:04:41,046 --> 00:04:46,050
to map an arbitrary nondeterministic
finite automaton to an equivalent

49
00:04:46,050 --> 00:04:51,098
deterministic finite automaton. So let's
begin by saying what's in our NFA. So,

50
00:04:51,098 --> 00:04:58,002
we'll have a set of states, Which we'll
call s and these are the states of the

51
00:04:58,002 --> 00:05:04,003
Nondeterministic machine. There's a star t
state, a little s which is one of the

52
00:05:04,003 --> 00:05:09,083
states and there is a set of final states
F. And then we also have to give the

53
00:05:09,083 --> 00:05:15,002
transition function and I want to write
out the state transition function. I want

54
00:05:15,002 --> 00:05:20,014
to use the state transition function to
define a, a operator that we're going to

55
00:05:20,014 --> 00:05:27,024
find handy for defining our DFA. So I'd
say that a applied to a set of states so x

56
00:05:27,024 --> 00:05:34,049
here is a set of states and a is a
character in the input language. So, a and

57
00:05:34,049 --> 00:05:42,050
x is = those states y such that there is
some x little x here, single state in the

58
00:05:42,050 --> 00:05:49,092
set of states such that there's a
transition from x to y on input a. Okay.

59
00:05:49,092 --> 00:05:56,017
So this is just a way of saying I've given
the transition function at this set level.

60
00:05:56,017 --> 00:06:02,006
It says for a given set of state x, show
me all the states that you can reach on

61
00:06:02,006 --> 00:06:22,028
input a. Alright. So now we're ready to
define our DFA. So what will the DFA be?

62
00:06:22,028 --> 00:06:27,076
Well, it's gonna have to have all of these
things. It's gonna have to have, perhaps

63
00:06:27,076 --> 00:06:33,025
where the states are? What are the start
state is? What's the final states are and

64
00:06:33,025 --> 00:06:38,039
what's the transition function is? So
let's begin with the set of states. The

65
00:06:38,039 --> 00:06:45,038
states will be the subsets Of s. So the
states of the DFA will be all possible

66
00:06:45,038 --> 00:06:51,070
subsets of the states of the NFA so there
will be one state of DFA for each subset

67
00:06:51,070 --> 00:06:57,048
of possible, each possible subset of
states of the NFA. And of course this is

68
00:06:57,048 --> 00:07:03,072
potentially a very big number but it's
still finite and so we can use that set

69
00:07:03,072 --> 00:07:10,003
of, of subsets of states as the states
based of the Deterministic machine So, now

70
00:07:10,003 --> 00:07:16,004
what's the start state of the DFA. Well
that's going to be the epsilon closure.

71
00:07:57,011 --> 00:08:03,041
Now one of the set of final states, Well,
so the final states will be consist of

72
00:08:03,041 --> 00:08:09,063
those state x and every member of the
states of the DFA are sets of states of

73
00:08:09,063 --> 00:08:16,017
the NFA. So that x is a set and is can be
every x such that x intersected with the

74
00:08:16,017 --> 00:08:57,051
set of final states of the NFA is not
empty. And finally we need to define the

75
00:08:57,051 --> 00:09:03,069
transition function. And do we do that?
Well, we, we need to say that for a given

76
00:09:03,069 --> 00:09:10,034
state x and another state y, when is there
a transition between them on some input a.

77
00:09:10,034 --> 00:09:17,031
Well that, there will be such a transition
under that conditions and well let's write

78
00:09:17,031 --> 00:09:23,027
them out. So, remember we're in state x.
And what do we need to know? Well we need

79
00:09:23,027 --> 00:09:28,095
to know, the set of states that we can
reach on input A, and we'll be justifying

80
00:09:28,095 --> 00:09:34,049
that that's A of X, and then once we've
gotten to where these, once we've seen

81
00:09:34,049 --> 00:09:40,060
where we can go from the set of states X
of input A. There's also a possibility of

82
00:09:40,060 --> 00:09:45,028
making [inaudible] after that so
furthermore we have to take the

83
00:09:45,028 --> 00:09:52,010
[inaudible] closer of that set of states,
okay? And So we'll say that there's a

84
00:09:52,010 --> 00:10:00,012
transition from x to y if y is equal to
this set of states. Alright, And notice

85
00:10:00,012 --> 00:10:05,058
that there's only one such set of states
for any x and that guarantees of this is a

86
00:10:05,058 --> 00:10:10,090
deterministic machine. Each machine, each
state will only have one possible move on

87
00:10:10,090 --> 00:10:15,050
each input so. We can just, now it goes to
our check list and see if we have a

88
00:10:15,050 --> 00:10:20,012
deterministic machine. We have a finite
set of states. We have a start state and

89
00:10:20,012 --> 00:10:24,097
we have a set of final states and we have
a transition function with only one more

90
00:10:24,097 --> 00:10:29,054
per input and no epsilon moves. And so
that is in fact a deterministic machine

91
00:10:29,054 --> 00:10:34,066
and the property that it maintain is that
each step of computation. The state of the

92
00:10:34,066 --> 00:10:40,024
DFA records the set of possible states
that the NFA could have gotten into the

93
00:10:40,024 --> 00:10:48,001
same input So let's work to an example of
constructing a Deterministic machine from

94
00:10:48,001 --> 00:10:52,033
a Nondeterministic machine. Here's the
Nondeterministic Finite Automata that we

95
00:10:52,033 --> 00:10:56,082
built in the last video and again this is
the one that I used at the beginning of

96
00:10:56,082 --> 00:11:01,008
the video to define epsilon enclosure. So
we're gonna do the example slightly

97
00:11:01,008 --> 00:11:06,006
differently than the construction I gave
on the previous slide. If we actually have

98
00:11:06,006 --> 00:11:10,065
to write out all the subsets of this many
states, it will take us a very, very long

99
00:11:10,065 --> 00:11:15,030
time. And it turns out that not all of the
subsets were actually used by the DFA. So

100
00:11:15,030 --> 00:11:20,001
we're just going to enumerate the states
that we actually need and we'll do that by

101
00:11:20,001 --> 00:11:24,082
beginning with the start sta te of DFA and
then working out which additional states

102
00:11:24,082 --> 00:11:29,030
are required. So how do we do that? Well,
we begin with the start state of the NFA

103
00:11:29,030 --> 00:11:34,065
which is just this state a. And then
recall at the start of the DFA is the

104
00:11:34,065 --> 00:11:40,069
epsilon closure of that state so that
corresponds to this purple set here.

105
00:11:40,069 --> 00:11:47,022
Alright. So the first state of the DFA,
the start state is the subset of states a,

106
00:11:47,022 --> 00:11:52,080
b, c, d, h, i. And now we have to work out
from this particular state from the start

107
00:11:52,080 --> 00:11:57,031
state what happens on each of the
impossible input values. So, the alphabet

108
00:11:57,031 --> 00:12:02,025
of this machine is one and zero so you
would have to have two transitions out of

109
00:12:02,025 --> 00:12:07,042
the state, one for an input of one and one
for an input of zero. So let's do input

110
00:12:07,042 --> 00:12:13,058
zero first. And, we can see looking at the
purple set that there's only one possible

111
00:12:13,058 --> 00:12:19,070
transition and that's from the state D to
the state F. So certainly the state s is

112
00:12:19,070 --> 00:12:25,073
included in the set of states if the NFA
can reach but then once we get the state f

113
00:12:25,073 --> 00:12:31,069
there's a lot of epsilon moves that we can
take and so in fact the second state of

114
00:12:31,069 --> 00:12:37,057
the DFA corresponds to a much larger set.
It's all the, it's the epsilon closure of

115
00:12:37,057 --> 00:12:42,096
f and that is, this set of states f, g, h,
i, a, b, c, and d, okay. So these are the

116
00:12:42,096 --> 00:12:49,001
set of possible states that the NFA could
be in after reading a single zero. Next,

117
00:12:49,001 --> 00:12:54,065
let's consider what happens from the start
state on an input of one. Which possible

118
00:12:54,065 --> 00:13:00,029
states can the NFA reach? And, if we look
at the transition function, we see there

119
00:13:00,029 --> 00:13:05,085
are two possible moves that the NFA could
take. It could be in state c. In which

120
00:13:05,085 --> 00:13:11,065
case it would move to state e or it could
have been state i, that's also part of the

121
00:13:11,065 --> 00:13:17,018
purple set in which case it would move to
state j. So, there are two possible states

122
00:13:17,018 --> 00:13:22,072
that the NFA can get into as a result of
reading a one and then after that, there's

123
00:13:22,072 --> 00:13:28,012
a bunch of epsilon moves that can take
place and in fact, it turns out that after

124
00:13:28,012 --> 00:13:33,087
reading a one, the machine could be in any
state except for state f. And that's this

125
00:13:33,087 --> 00:13:39,030
set of states and you'll notice that this
particular set of states, the read set

126
00:13:39,030 --> 00:13:44,087
includes the final state of the NFA so
this is also a final state indicating that

127
00:13:44,087 --> 00:13:50,010
after reading one, the NFA could be in an
accepting state. So this would be an

128
00:13:50,010 --> 00:13:56,071
accepting state of the DFA Well, we still
have to fill in for both of the two states

129
00:13:56,071 --> 00:14:02,069
that we've added here. The two states on
the right of the machine what they do on

130
00:14:02,069 --> 00:14:08,040
input zero, what they do on input one. So
let's figure that out. So beginning with

131
00:14:08,040 --> 00:14:13,028
the red state on input zero, what can
happen? Well, look the red state includes

132
00:14:13,028 --> 00:14:18,047
state d and it can move to state f but
we've already computed what happens on the

133
00:14:18,047 --> 00:14:23,072
epsilon, what the epsilon closure that is
just the green state. And so if I'm in the

134
00:14:23,072 --> 00:14:30,017
red state and I read zero, I move to the
green state. If I'm in the red state and I

135
00:14:30,017 --> 00:14:36,064
read a one, you'll see that both states,
NFA states c and i are in the red set. And

136
00:14:36,064 --> 00:14:42,063
so, it just takes us back to the red set.
And similarly for the green state, if I

137
00:14:42,063 --> 00:14:48,009
read a one, I move to the red state. And
if I read a zero, I stay in the green

138
00:14:48,009 --> 00:14:53,012
state. And so, this then is our
deterministic machine down here. This is

139
00:14:53,012 --> 00:14:58,072
the deterministic machine and again, it
simulates the NFA. So every move at the

140
00:14:58,072 --> 00:15:04,061
deterministic machine, it records the set
of possible states that the NFA could be

141
00:15:04,061 --> 00:15:10,013
in and it will accept a string infinitely
if the NFA could accept the string.
