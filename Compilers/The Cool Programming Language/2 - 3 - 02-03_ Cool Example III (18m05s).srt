
1
00:00:04,017 --> 00:00:08,098
Hello again. In this video we're gonna
wrap up our overview of cool with one more

2
00:00:08,098 --> 00:00:21,093
example of writing a cool program. For our
final example, let's look at a program

3
00:00:21,093 --> 00:00:29,015
that actually manipulates some interesting
data structure. So, we'll begin here by

4
00:00:29,015 --> 00:00:35,092
opening up a file, and let's call our
program list.cl this time. And as usual,

5
00:00:35,092 --> 00:00:47,059
I'll begin by writing our main routine,
and our main method. And once again let's,

6
00:00:48,089 --> 00:00:54,034
let's make this inherent for my O so we
can make my I, O routines here, and let?s

7
00:00:54,034 --> 00:01:00,019
just begin with something very simple As,
as always. Let's just have something that

8
00:01:00,019 --> 00:01:05,084
prints out; Hello world, but in a little
bit of an unusual way. Let's we're gonna

9
00:01:05,084 --> 00:01:10,060
end up writing a list, a list
abstractions. And, let's first build a

10
00:01:10,060 --> 00:01:15,090
list by hand, or at least build the
elements of a list by hand and then we'll

11
00:01:15,090 --> 00:01:21,048
actually build the list abstraction and
put them in a list. So, and lets have some

12
00:01:21,048 --> 00:01:31,003
strings, The line of our string, hello.
And this will also illustrate how you do

13
00:01:31,003 --> 00:01:36,034
multiple let bindings, simultaneously; I
should say simultaneously, how you do

14
00:01:36,034 --> 00:01:41,058
multiple let bindings in one let
expression. So you do them by just listing

15
00:01:41,058 --> 00:01:47,025
them and, notice that this uses commas as
a separator rather than semicolons as a

16
00:01:47,025 --> 00:01:59,090
terminator. So, this lead binding is going
to define three names of hello, world, and

17
00:01:59,090 --> 00:02:10,002
newline. All of which are strings, And
then, We're going to now print these out

18
00:02:10,002 --> 00:02:15,076
on the screen. So we're going to want to
be able to do out string, and since main

19
00:02:15,076 --> 00:02:21,087
inherits himself we can do that without a,
without an object there cause just again a

20
00:02:21,087 --> 00:02:27,083
dispatches to the self object. And we want
to concatenate these strings together in

21
00:02:27,083 --> 00:02:33,022
the right order. So I'll do hello, dot
this is, hello is the string it can be

22
00:02:33,022 --> 00:02:38,075
concatenated to world, and world is a
string so it can be concatenated to new

23
00:02:38,075 --> 00:02:43,095
line. And that should do the job. And I'm
just [inaudible] one more thing about this

24
00:02:43,095 --> 00:02:49,036
left this, these left bindings here. This
notice that the comma's, the comma's a

25
00:02:49,036 --> 00:02:54,039
separator here meaning it doesn't come
after the last one in the list. So it just

26
00:02:54,039 --> 00:02:59,030
separates that into the list, it's not a
terminator. And, now we can close up our

27
00:02:59,030 --> 00:03:08,096
main procedure. [sound] Close up our class
definition. Save it. And now let's see if

28
00:03:08,096 --> 00:03:17,052
it compiles. Oh amazing first try. And we
run it and it prints hello world, as

29
00:03:17,052 --> 00:03:22,076
expected. So now, let's instead of
introducing the three strings separately

30
00:03:22,076 --> 00:03:28,027
and then concatenate it together, let's
write an abstraction where we can build a

31
00:03:28,027 --> 00:03:33,092
list of strings, and then that abstraction
will have a function within it to do the,

32
00:03:34,033 --> 00:03:39,077
to do the concatenation. Alright so, have
our class called list and, every list

33
00:03:39,077 --> 00:03:45,021
needs, I think they have two components.
So first it's gonna have the item that's

34
00:03:45,021 --> 00:03:51,000
in the list and that'll be a string. And
then when you have a pointer to the next,

35
00:03:51,000 --> 00:03:56,086
to the tail of the list, to the rest of
the list, and so we'll have a next field

36
00:03:56,086 --> 00:04:02,056
to points, is another list of strength.
And now we need a couple of methods, In

37
00:04:02,056 --> 00:04:08,056
order to use this list we'll need to be
able to initialize a list in some way. So,

38
00:04:08,056 --> 00:04:14,050
the initialization function will take an
item and the rest of the list, the next

39
00:04:14,050 --> 00:04:21,010
part of the list. And, what is it going to
do? Well let's go A to D to set the fields

40
00:04:21,010 --> 00:04:26,013
of the objects. So this will have to be
done as a series of assignment statements.

41
00:04:26,013 --> 00:04:30,098
So we'll need a statement block. And we
will set the item to be the I argument.

42
00:04:30,098 --> 00:04:37,067
We'll set the next, attribute to be the N
argument. And now, we actually want this

43
00:04:37,067 --> 00:04:44,007
initialized object here, this, this method
here to return the object itself. So that

44
00:04:44,007 --> 00:04:49,087
and that'll be convenient for chained
together calls to unit. So, I'll have it

45
00:04:49,087 --> 00:04:56,069
return self. It'll return the self object.
And that's the end of our statement block.

46
00:04:57,063 --> 00:05:02,097
And then that is the end of our method,
And made a mistake up here. We have

47
00:05:02,097 --> 00:05:08,095
declared the return type of [inaudible]
and what it's going to return of course is

48
00:05:08,095 --> 00:05:14,093
an object of type list. We need to put a
list deceleration there. Alright, so that

49
00:05:14,093 --> 00:05:21,006
takes care of [inaudible]. And now we can
use this to build, build a list down here.

50
00:05:21,028 --> 00:05:27,044
So what should we do? Let?s actually have
a new variable called list. That we'll

51
00:05:27,044 --> 00:05:34,005
introduce here in this lead, this series
of lead bindings. And let's just build a

52
00:05:34,005 --> 00:05:40,059
list out of these three objects. So we'll
say, we'll have a new list, and then we'll

53
00:05:40,059 --> 00:05:47,043
initialize it to contain the string hello.
What should the, rest of the list be, well

54
00:05:47,043 --> 00:05:55,035
that should be another list which is
initialized to have the string world. And

55
00:05:55,035 --> 00:06:00,053
what should be inside of that list? Well,
they'll have to be another new list

56
00:06:00,053 --> 00:06:05,043
object. Which we'll initialize to have new
line, And now what do we put here?

57
00:06:05,043 --> 00:06:10,041
Actually there's a little bit of a problem
here, isn't there? We need to put a list

58
00:06:10,041 --> 00:06:15,051
object here. But we don't want to allocate
a, a new list object. We want that to be

59
00:06:15,051 --> 00:06:20,018
really the equivalent of a, of a null
pointer. And there's no name for that in

60
00:06:20,018 --> 00:06:24,097
Cool, actually. You can't write down the
name of a null pointer, it's called void

61
00:06:24,097 --> 00:06:29,097
in Cool. There's no, there's no, no
special symbol for that. So we'll have to

62
00:06:29,097 --> 00:06:35,004
create a variable that is just not
initialized. And that will be, so an

63
00:06:35,004 --> 00:06:41,007
uninitialized variable of type list will,
in fact, be void. It'll be a null pointer.

64
00:06:41,007 --> 00:06:46,043
So let's call that nil. And it'll be
uptight list and no initializer and so nil

65
00:06:46,043 --> 00:06:51,060
there will point to nothing or the
[inaudible] and then we can use nil to

66
00:06:51,060 --> 00:06:56,077
terminate our list here and then we have
to close off all the parans for all

67
00:06:56,077 --> 00:07:02,040
nesting here and I think that's it and so
that will be our list. Okay? So I have a

68
00:07:02,040 --> 00:07:08,049
list of three strings, and now what we
want to do with that is to print it out.

69
00:07:08,049 --> 00:07:14,089
And so what we would like to do is to have
a list, call it the list, and a function

70
00:07:14,089 --> 00:07:21,044
that's going to flatten that list, and
we'll just print it. So, that is the, what

71
00:07:21,044 --> 00:07:27,074
the, what the main program should do. And
now You have to write the flatten

72
00:07:27,074 --> 00:07:34,072
function. So flatten takes no arguments
and it's going to return a string, it's

73
00:07:34,072 --> 00:07:40,074
going to return a single string. And
flatten is pretty simple function. What we

74
00:07:40,074 --> 00:07:46,098
have to do, well, There's really two
cases. One is if we're at the end of the

75
00:07:46,098 --> 00:07:52,007
string and the other is if we're not yet
at the end of the string. So, let's test

76
00:07:52,007 --> 00:07:56,084
for that. So, how do we know if we're at
the end of the s tring? Well, if the next

77
00:07:56,084 --> 00:08:01,013
pointer is, is void then there's no,
nothing more in the string. There's

78
00:08:01,013 --> 00:08:06,052
actually is a special test for that and
it's called the IS void function and it's

79
00:08:06,052 --> 00:08:11,012
written like this. So, IS void of next.
Okay. So, the next field, so, the next

80
00:08:11,012 --> 00:08:18,021
field is void. Then what are we going to
return? Oops. Well then the result here is

81
00:08:18,021 --> 00:08:24,033
just the item, Whatever the item was in
this last element of the list, and

82
00:08:24,033 --> 00:08:32,056
otherwise. What do we want to do? Well,
otherwise we want to take the item and we

83
00:08:32,056 --> 00:08:41,084
want to [inaudible] onto it. The results
of flattening the rest of the list, And

84
00:08:41,084 --> 00:08:57,082
that is our flatten method. So let's see
if that works. So let?s compile this. And

85
00:08:57,082 --> 00:09:05,060
we got a couple of Syntax errors here so
let's go back and see what's going on. So

86
00:09:05,060 --> 00:09:12,063
we have a syntax error here. At the end of
the, the flatten method. And we see that

87
00:09:12,063 --> 00:09:18,094
we left out the [inaudible] to close a
conditional. So a conditional has to be

88
00:09:18,094 --> 00:09:24,031
ended with, with [inaudible]. Alright.
[sound] And let?s see if that's working

89
00:09:24,031 --> 00:09:32,023
now. [sound] And we slide this syntax
error, I at line 29, and the mistake here

90
00:09:32,023 --> 00:09:40,039
is that we forgot to declare the type of
this variable which is a list. And then it

91
00:09:40,039 --> 00:09:45,047
gets initialized to this, to this big
expression that, we wrote out. Let me just

92
00:09:45,047 --> 00:09:50,018
do the indentation a little more nicely
here. And notice something actually is

93
00:09:50,018 --> 00:09:54,047
worth mentioning here. That this
definition here, this definition of the

94
00:09:54,047 --> 00:09:59,076
variable list. It depends on the
definition of the previous variables in

95
00:09:59,076 --> 00:10:06,022
the left. So each of so when a let binding
is made the name the variable that's bound

96
00:10:06,022 --> 00:10:12,033
is actually available in subsequent let
expressions. So in this case this variable

97
00:10:12,033 --> 00:10:18,041
list makes use of all of hello world and
new life Which were defined earlier in the

98
00:10:18,041 --> 00:10:23,080
same let construct. Alright let?s save
this. [sound] And come over here and

99
00:10:23,080 --> 00:10:31,029
compile it. And we see if we got another
bug in the, in the code. So if we come up

100
00:10:31,029 --> 00:10:36,085
here, we see that we've, [inaudible] made
a mistake here, I've used functional

101
00:10:36,085 --> 00:10:42,027
notation here, calling flattened of next.
And what I actually wanted to do was to

102
00:10:42,027 --> 00:10:47,036
dispatch to nex t on the method flatten,
so that should be written like that.

103
00:10:47,036 --> 00:10:53,012
Alright, probably getting close now. Let's
see if it works yet. Well it compiles. And

104
00:10:53,012 --> 00:11:03,030
now let's see if it runs. And indeed it
does. It prints out hello world, just as

105
00:11:03,030 --> 00:11:08,068
we expected. Now let's go back to our
program and let's generalize this list

106
00:11:08,087 --> 00:11:14,032
abstraction in one way. Let's say that we
can have an arbitrary list of objects, not

107
00:11:14,032 --> 00:11:19,018
just strings and that will require us to
change a few things so it can be

108
00:11:19,018 --> 00:11:24,096
initialized now with an object. And now
when it comes down to flatten this list we

109
00:11:24,096 --> 00:11:30,008
want to produce a string, we want to
produce, produce a print representation.

110
00:11:30,008 --> 00:11:35,054
But not everything in the, in the list, is
necessarily a string. And we need a way to

111
00:11:35,054 --> 00:11:40,082
traverse the list and do different things
for different kinds of things that might

112
00:11:40,082 --> 00:11:45,078
be in the list, for different types of
things that might be in the list. And so

113
00:11:45,078 --> 00:11:51,012
there's a constructing [inaudible] for
recovering the type of an of an object, at

114
00:11:51,012 --> 00:11:55,089
run time, and this is called the case
construct. So let me first introduce a

115
00:11:55,089 --> 00:12:02,001
[inaudible] expression here. We'll let the
string that we're gonna construct. Which

116
00:12:02,001 --> 00:12:07,041
is of type string. [sound] And, that's
going to be initialized to something and

117
00:12:07,041 --> 00:12:12,099
now it?s going to be a case and what are
we going to case on? It's going to depend

118
00:12:12,099 --> 00:12:18,071
on the kind of thing the item is. So the
items in the list could be different kinds

119
00:12:18,071 --> 00:12:24,014
of types and we want to do different
operation depending on what item actually

120
00:12:24,014 --> 00:12:29,086
is. So do case item and the keyword is of,
and now we have different branches of the

121
00:12:29,086 --> 00:12:35,016
case expression for different kinds of
things that could be in the list, let?s

122
00:12:35,016 --> 00:12:41,029
say if it is an int-. Okay, so what this
does, is this, this says that if the item

123
00:12:41,029 --> 00:12:47,083
is an int, then we're gonna rename it to
I. We're gonna bind I to that integer and

124
00:12:47,083 --> 00:12:53,089
then we could do something with I. And
what would we want to do with I. Well,

125
00:12:53,089 --> 00:13:01,031
we'd probably want to convert it, to a, to
a string. So, I'll do I two A of I. And

126
00:13:01,031 --> 00:13:08,002
what if in fact That item happened to be
of type string? The item in the list

127
00:13:08,002 --> 00:13:12,061
happened to be of type string. Wel l, then
we can just use the item itself, as the

128
00:13:12,061 --> 00:13:16,098
string representation. And we could do
this for other kinds of types. If we had

129
00:13:16,098 --> 00:13:21,012
other kinds of types in our system, we
could continue to, to list out other,

130
00:13:21,029 --> 00:13:25,099
cases here and how to convert them into a
string representation. But let's just have

131
00:13:25,099 --> 00:13:30,058
a default case here. We'll say if it's any
other kind of type, which would, which we

132
00:13:30,058 --> 00:13:35,023
covered by having, a branch saying that if
it's of a type object, we'll call it O,

133
00:13:35,023 --> 00:13:40,061
then we should just abort. And so we
should just call the word function and

134
00:13:40,061 --> 00:13:48,095
quit. And that's our case. It needs to be
terminated with, my closing keyword called

135
00:13:48,095 --> 00:13:55,021
Esack, and the reverse of, of case. And
now we can use that string that we

136
00:13:55,021 --> 00:14:02,043
constructed in our, little function here.
So if, if, the next field is void then

137
00:14:02,043 --> 00:14:09,047
we're just going to return the string.
Otherwise, we're gonna return the string

138
00:14:09,047 --> 00:14:16,029
concatenated, with the flattening out of
the rest of the list. Okay Now there's a

139
00:14:16,029 --> 00:14:21,078
couple of things we have to fix up. We
used the I2A method here, which means that

140
00:14:21,078 --> 00:14:33,009
list needs to inherit From the, conversion
class A2I. And there's another issue here,

141
00:14:33,009 --> 00:14:43,025
I see. And that's right here. So, if you
notice The, the. The case statement needs

142
00:14:43,025 --> 00:14:48,000
to produce a string. Okay. And it turns
out that abort does not return a string.

143
00:14:48,000 --> 00:14:52,088
Abort actually terminates the program, but
its type is that it returns an object. And

144
00:14:52,088 --> 00:14:57,070
so here we have to convince the type
checker to convince, to accept this, piece

145
00:14:57,070 --> 00:15:02,023
of code. And we need to get this branch
here to type as a string. So what we can

146
00:15:02,023 --> 00:15:06,082
do, and this is ugly, but it's the way to
do it, is we put it in a, in a block in a

147
00:15:06,082 --> 00:15:11,010
statement block. We call Abort First, and
again that will just terminate the

148
00:15:11,010 --> 00:15:15,027
program. And now we can put any string
expression we want after that, and that

149
00:15:15,027 --> 00:15:19,077
will be the, that will give a type string
to the entire block. So we can just put

150
00:15:19,077 --> 00:15:24,006
the empty string here for example, and
then as we terminate it with a semicolon

151
00:15:24,006 --> 00:15:28,067
since this isn't a block. And we can close
that with a curly brace. Okay, so this is

152
00:15:28,067 --> 00:15:32,095
just something we have to do to make the
typ e checker happy. And that may be

153
00:15:32,095 --> 00:15:41,094
everything we needed to do. So let's try
compiling this. And we have to include

154
00:15:41,094 --> 00:15:51,004
the, the Virgin library. And we have one
syntax error So far, And that's because we

155
00:15:51,004 --> 00:15:57,080
forgot to put the, semicolon terminator
on, on each of our, each of the, each of

156
00:15:57,080 --> 00:16:05,069
the, variables that we were introducing on
the left. Okay you've got to save that,

157
00:16:05,069 --> 00:16:13,067
let's try this again. And oops, I didn't
actually managed to fix the syntax here

158
00:16:13,067 --> 00:16:18,087
and that's because I put the semicolon in
the wrong place. Actually, if I forgot the

159
00:16:18,087 --> 00:16:24,097
Variables that are bound in a let, or
separated by commas, But the branches of

160
00:16:24,097 --> 00:16:30,091
the case have to be terminated by semi
colons. So what I said before was

161
00:16:30,091 --> 00:16:36,094
incorrect about using semi colons to
terminate let bindings it just in case

162
00:16:36,094 --> 00:16:42,072
branches where we need it, in this
example. Anyway, coming back to this let

163
00:16:42,072 --> 00:16:49,004
see if it compiles, and it does. And now
let?s run it. And it works. Now we of

164
00:16:49,004 --> 00:16:56,067
course we haven't actually exploited the
ability to have different types of objects

165
00:16:56,067 --> 00:17:05,077
in the list. So let?s, let's do that.
Let's add an integer in here. Type INT and

166
00:17:05,077 --> 00:17:23,081
let's give it, the number 42. And, we can
insert it in here. And now we can pass any

167
00:17:23,081 --> 00:17:32,060
object to a nit in the first position. So
we'll just put in 42 right there. And when

168
00:17:32,060 --> 00:17:39,078
we compile and run this it should print,
hello world 42. If we, if everything goes

169
00:17:39,078 --> 00:17:45,060
as expected, And it does, And that
concludes our little tour of [inaudible].

170
00:17:45,060 --> 00:17:50,053
There are a couple of features that we
haven't shown, in these examples; but, you

171
00:17:50,053 --> 00:17:55,018
can look in the examples directory, for
lots more programs. Many more programs

172
00:17:55,018 --> 00:18:00,041
that will show you all the different, ins
and outs and details of the other language

173
00:18:00,041 --> 00:18:03,020
features, as well as the ones we've
covered here.
