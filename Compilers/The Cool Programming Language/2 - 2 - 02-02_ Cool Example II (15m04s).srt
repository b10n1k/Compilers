
1
00:00:03,058 --> 00:00:08,000
Welcome back, In this video we're going to
look at another example of cool

2
00:00:08,000 --> 00:00:19,067
programing. This time let's move beyond
the simple hello world kind of examples

3
00:00:19,067 --> 00:00:25,009
and on to something more exciting, say,
the ever popular factorial function. So,

4
00:00:25,009 --> 00:00:30,094
in order to write factorial, we'll need to
open a file, which we can write some code.

5
00:00:30,094 --> 00:00:36,071
Let me start that. And recall from last
time that every cool program has to have a

6
00:00:36,071 --> 00:00:42,067
main class and the main class is required
to have a main method. And we don't care

7
00:00:42,067 --> 00:00:48,022
what the main method return, so we'll just
have it return something a type object,

8
00:00:48,022 --> 00:00:53,034
and then we'll just fill in a skeleton
here on the file. And, so now we're ready

9
00:00:53,034 --> 00:00:58,014
to write some codes. So what are we going
to have the main method do? Well, before

10
00:00:58,014 --> 00:01:02,071
we can actually write factorially, before
we can get to the guts of this program,

11
00:01:02,071 --> 00:01:07,045
which is actually not very difficult. We
need to talk about IO some more. Because

12
00:01:07,045 --> 00:01:12,030
we're going to need to be able to, read
and write, numbers. We need to be able to

13
00:01:12,030 --> 00:01:16,087
read numbers from, the, the user who's
running the program, and print them back

14
00:01:16,087 --> 00:01:21,021
out. So let's just review little bit about
IO, also. In order to invoke the IO

15
00:01:21,021 --> 00:01:25,060
functions, we need an IO object. And one
of the IO functions is something that

16
00:01:25,060 --> 00:01:31,098
prints out a string. So let's just, write
a program that we already know how to do,

17
00:01:31,098 --> 00:01:38,053
just to confirm that we remember that.
And, we can compile this program. And it

18
00:01:38,053 --> 00:01:44,033
should just print one. And, let's see.
Indeed it does. Okay? So it prints out the

19
00:01:44,033 --> 00:01:50,038
number one. And so now, let's come back
here and let's talk about how to do input.

20
00:01:50,038 --> 00:01:55,099
So, instead of just printing out the
number one, let's print out a strain that

21
00:01:55,099 --> 00:02:01,052
the user types in. So, ins-, in here,
we're going to read a strain. And in order

22
00:02:01,052 --> 00:02:07,050
to do that, we need an IO object because
there is another function, another method,

23
00:02:07,050 --> 00:02:14,004
called in-strain. Okay. And so this will
renew this string. And return to string.

24
00:02:14,004 --> 00:02:21,001
And to make sure that we get the nice
output let's concatenate on to that string

25
00:02:21,001 --> 00:02:27,090
a new line. So, this is just to. When it
prints this string back out it will be

26
00:02:27,090 --> 00:02:36,028
printed on i ts own line. So, let's try
compiling this, And steak. It compiles,

27
00:02:36,028 --> 00:02:42,090
And now we can run spin. Remember the bang
command in UNIX runs the previous command

28
00:02:42,090 --> 00:02:49,037
that began with the same letters. And now
the program runs and it waits. Cause it's

29
00:02:49,037 --> 00:02:56,008
waiting for me to type something. And if I
type it type in one it prints back one and

30
00:02:56,008 --> 00:03:01,082
if I type in 42 it gives me back 42. And
so now The next thing we need to talk

31
00:03:01,082 --> 00:03:06,044
about is how to convert strings into
integers, because if we're going to do a

32
00:03:06,044 --> 00:03:11,041
factorial, we want to work on integers and
not strings. And at the moment we're just

33
00:03:11,041 --> 00:03:15,097
reading and writing strings. So, there is
a library written in cool that does

34
00:03:15,097 --> 00:03:20,071
conversion between integers and strings.
And we're going to give the main class

35
00:03:20,071 --> 00:03:26,083
here the functionality of that class.
Which is called A2I for ASCII to integer.

36
00:03:26,083 --> 00:03:34,038
And that defines a bunch of methods, that
can convert between strings and integers.

37
00:03:34,038 --> 00:03:42,032
So let's add those, commands in here. So
here, here's our string. That we've read

38
00:03:42,032 --> 00:03:50,016
in. And what we want to do now is to,
convert this into an integer. So let me

39
00:03:50,016 --> 00:03:57,059
just add a couple of parens here. So
there's our string, okay? And now we're

40
00:03:57,059 --> 00:04:05,085
going to invoke. On that the method I'm
sorry we're going to call on that the

41
00:04:05,085 --> 00:04:11,078
function the method, A to I. Okay? And
let's just double check here that we've

42
00:04:11,078 --> 00:04:16,037
got friends in the right place. So that's
the argument to A2I. Now, we recall that

43
00:04:16,037 --> 00:04:20,079
when we have a dispatch to a method and
it's just sitting by itself with not

44
00:04:20,079 --> 00:04:25,016
object, it's dispatched to the self
object. And the self object is the object

45
00:04:25,016 --> 00:04:29,058
of the current class that we're in. In
this case the main object, which has

46
00:04:29,058 --> 00:04:34,028
inherited the A2I methods, And so the A2I
functions should be defined in there. Now

47
00:04:34,028 --> 00:04:38,050
we have an integer. And we can do
something with that integer if we like.

48
00:04:38,050 --> 00:04:43,052
So, let's add some more [inaudible] here
and let's just say we add just one to the

49
00:04:43,052 --> 00:04:48,025
integer. Okay. And then once we're done
with our integer. Whatever operation it is

50
00:04:48,025 --> 00:04:53,003
that we want to do with the integer we
need to convert it back to a string so

51
00:04:53,003 --> 00:04:57,064
that we can print it out. An there's an
inverse fun ction IUA that will do. So, I

52
00:04:57,064 --> 00:05:02,031
don't know if we have all the [inaudible]
in the right places at this point. So,

53
00:05:02,031 --> 00:05:07,018
let's just check. Yes. That looks like
that should work. So this will, re-in a

54
00:05:07,018 --> 00:05:13,035
string, convert, convert it to an integer,
add one to it convert it back to a string,

55
00:05:13,035 --> 00:05:18,082
concatenate on a new line, and print it
out. Now let's see if all that actually

56
00:05:18,082 --> 00:05:24,064
works, so let's run the compiler and we
have a problem here. It says that we have

57
00:05:24,064 --> 00:05:29,042
an undefined class A to I. And the reason
is, we didn't supply the code for A2I. So

58
00:05:29,042 --> 00:05:33,078
if we look in our directory here, we'll
see I've already copies in the class file

59
00:05:33,078 --> 00:05:37,054
for A2I. And I encourage you to go and
look at that code. It's actually

60
00:05:37,054 --> 00:05:41,036
interesting code to see how the
[inaudible] are written in [inaudible].

61
00:05:41,036 --> 00:05:45,066
But now [inaudible] talk about how to
compile a program that uses a library, And

62
00:05:45,066 --> 00:05:50,023
the way you do it is very simple. You just
list all the class files on the command

63
00:05:50,023 --> 00:05:55,041
line when you call up the compiler. And it
will read them all in and treat them as a

64
00:05:55,041 --> 00:06:00,031
single program. So in this case we
compile, compile fact together with A2I.

65
00:06:00,031 --> 00:06:06,016
And that complies. And then we can run it.
[sound]. And now, if I type in three, it

66
00:06:06,016 --> 00:06:11,049
prints four. And if I type in one, it
prints two. And so the program seems to be

67
00:06:11,049 --> 00:06:16,083
working. And now we're almost ready to
write our factorial function. So what do

68
00:06:16,083 --> 00:06:22,023
we want to do in factorial? Well, we want
to do something other than just adding

69
00:06:22,023 --> 00:06:28,005
one. Instead, we want to call, our special
function factorial. So let's insert a call

70
00:06:28,005 --> 00:06:35,031
to factorial in here. Okay, and let's get
rid of the plus one. And then let's check

71
00:06:35,031 --> 00:06:41,011
that we have all the parens that we need.
So we need to close off the, the A2I call,

72
00:06:41,011 --> 00:06:46,077
the factorial call, The I2A call. And then
that last one should be the out string

73
00:06:46,077 --> 00:06:52,029
call, And it is, Okay. So now we can add a
method fact to this class, And fact is

74
00:06:52,029 --> 00:06:58,009
gonna take an integer argument. So we need
a parameter here, And it's type is in

75
00:06:58,009 --> 00:07:04,010
force. And the whole thing is gonna return
an integer. And then we have body of our

76
00:07:04,010 --> 00:07:08,069
function, And probably a good idea here,
just to make sure that we got this much

77
00:07:08,069 --> 00:07:13,015
right, to do something simple. So let's
just try to make a function that returns

78
00:07:13,015 --> 00:07:17,061
one more than it's argument. So this will
do exactly the same thing that we had

79
00:07:17,061 --> 00:07:23,067
before and let's just confirm that, that
is working. So EW compile with the A2I

80
00:07:23,067 --> 00:07:31,000
library and now we have a syntax error.
And we see that I forgot the closing

81
00:07:31,000 --> 00:07:37,090
semicolon here for the method. Remember
the, the, class body is a list of methods,

82
00:07:37,090 --> 00:07:44,055
and each method is terminated by a
semicolon, Must try compiling that again.

83
00:07:44,055 --> 00:07:50,062
Now it compiles. Let's run it. We type in
four gives a spec five. Alright, So looks

84
00:07:50,062 --> 00:07:56,077
right we're ready now to actually right
the code for factorial. And this is gonna

85
00:07:56,077 --> 00:08:02,038
be anti climactic because it's actually a
very simple code if we write it

86
00:08:02,038 --> 00:08:08,030
recursively. So let's do that. So how's
that going to work? Well, everybody knows

87
00:08:08,030 --> 00:08:14,022
the definition by Hardy Hope. If I is
equal to zero then the factorial of zero

88
00:08:14,022 --> 00:08:24,019
is one. And we have a keyword there then
one, otherwise the factorial is going to

89
00:08:24,019 --> 00:08:31,005
be I times, the factorial of I minus one.
Right, and then if statements in

90
00:08:31,005 --> 00:08:36,023
[inaudible] always end in the keyword
[inaudible] so it's an if then else

91
00:08:36,023 --> 00:08:41,048
[inaudible] construct. And that is
actually the entire definition. So now we

92
00:08:41,048 --> 00:08:46,066
should have a program that actually
computes factorial, it compiles, so now

93
00:08:46,066 --> 00:08:52,082
let's run it. So factorial of three is
six. And factorial of six, is 720 and that

94
00:08:52,082 --> 00:08:58,062
looks right. And if we try it one more
time with a bigger number, we get a, we

95
00:08:58,062 --> 00:09:03,077
get a large number, we think that's
probably correct. And so, anyway our

96
00:09:03,077 --> 00:09:09,035
factorial function, is working. So, now
let's come back here, and just as an

97
00:09:09,035 --> 00:09:14,050
exercise, let's rewrite this code
iteratively. So instead of using a

98
00:09:14,050 --> 00:09:22,062
recursive function, let's write it using a
loop. And in order to that [inaudible]

99
00:09:22,062 --> 00:09:26,084
gonna get rid of that code. What are we
going to need? Well, we're going to need

100
00:09:26,084 --> 00:09:31,055
an accumulator here. We're going to need
a, a local variable that we can use to

101
00:09:31,055 --> 00:09:36,016
accumulate the results of the factorial
computation. And the way you declare local

102
00:09:36,016 --> 00:09:39,096
variables in [inaudible] is with
[inaudible] Statements, or naudibl

103
00:09:39,097 --> 00:09:44,037
expressions. So we're gonna have, let's
call this, variable fact, for the, result

104
00:09:44,037 --> 00:09:48,071
of factorial. And notice here that I can
have a variable that has the same name as

105
00:09:48,071 --> 00:09:52,057
the function. And the programming
language, [inaudible] will not get

106
00:09:52,057 --> 00:09:57,034
confused about that, Because variables and
functions, play different roles. So we'll

107
00:09:57,034 --> 00:10:04,034
have the factorial fact, excuse me, it's
of type Int, and we do initialize it to

108
00:10:04,034 --> 00:10:10,011
one. Alright, so that multiplication will
work. I think that the default for

109
00:10:10,011 --> 00:10:15,028
integers is to be initialized to zero and
that would not be good if we're going to

110
00:10:15,028 --> 00:10:20,057
be multiplying up fact with other with
other numbers. Alright, so then the, a let

111
00:10:20,057 --> 00:10:25,024
has two parts. It has the variable or
variables that you are declaring. This

112
00:10:25,024 --> 00:10:30,022
could actually be a list of variables.
We'll only have one this time. And then it

113
00:10:30,022 --> 00:10:35,014
has a body. The, the expression or the
computation in which the fact variable is

114
00:10:35,014 --> 00:10:40,017
available. And what do we want to do? So,
I think we're gonna need to have this be a

115
00:10:40,017 --> 00:10:44,066
statement block 'cause we're gonna need to
have more than one statement in the

116
00:10:44,066 --> 00:10:49,009
sequence. And we'll see why in just a
minute. But then we wanna have a loop. And

117
00:10:49,009 --> 00:10:53,047
so what is our loop going to do? Well,
we're gonna say while I is not equal to

118
00:10:53,047 --> 00:11:00,072
zero. What do we, and what do we need to
do the opening for the loop body the

119
00:11:00,072 --> 00:11:06,081
opening keyword is called loop. [sound].
And now, I think we're going to need

120
00:11:06,081 --> 00:11:11,086
another statement block here. So let's
open up a block. We're gonna probably need

121
00:11:11,086 --> 00:11:17,054
to do more than one thing. The first thing
we want to do is we want to have fact. Be

122
00:11:17,054 --> 00:11:23,019
fact times I, so we know that I is not
zero so we need to multiply the current

123
00:11:23,019 --> 00:11:28,092
value of I into fact to accumulate the
result and then we want to subtract one

124
00:11:28,092 --> 00:11:34,072
from I and notice that the assignment
statement in cool is this backwards arrow.

125
00:11:34,072 --> 00:11:39,065
That's how you do assignment. It's also
how you do initialization. So,

126
00:11:39,065 --> 00:11:45,045
initialization and assignment look the
same. Then we can close off our statement

127
00:11:45,045 --> 00:11:50,086
block. Okay, so the body of a while loop
is always a single expression. In this

128
00:11:50,086 --> 00:11:56,040
case, that expression is a block that
consists of two statements. [sound] And

129
00:11:56,040 --> 00:12:01,066
then we can close the loop. And the
closing for a loop is the pool key word.

130
00:12:01,084 --> 00:12:06,036
And then now we're in a statement block,
so this has to end with a semicolon.

131
00:12:06,036 --> 00:12:11,011
Notice the statement block up there from
the let, And now we want the result of the

132
00:12:11,011 --> 00:12:15,046
let block, or the let expression, to be
factorial. So whatever the, whatever we

133
00:12:15,046 --> 00:12:19,092
got out of the while loop, whatever we
computed in the while loop, we want that

134
00:12:19,092 --> 00:12:24,040
to be the result of the entire let
expression. [sound] so that's the last

135
00:12:24,040 --> 00:12:29,062
statement of our blog. Remember the last
statement of a statement blog, is the

136
00:12:29,062 --> 00:12:34,085
value of the blog. The body of the led is
the, the result of the led, so fact will

137
00:12:34,085 --> 00:12:39,032
also be result of the whole led
statements, it's just the result of the

138
00:12:39,032 --> 00:12:44,060
statement blog. And since the body of the,
factorial method itself is just the led

139
00:12:44,060 --> 00:12:49,032
expression, fact will be the result of the
whole thing. And so this, if we've

140
00:12:49,032 --> 00:12:54,042
written, haven't made any mistakes, should
be an iterative version of factorial. So,

141
00:12:54,042 --> 00:13:00,006
let's compile this. And amazingly it
complies on the first try. And now let's

142
00:13:00,006 --> 00:13:05,007
run it. [sound] And whoa! It actually
works. So we got six. And let's just do

143
00:13:05,007 --> 00:13:09,095
one more test, to see that, to convince
ourselves that, things are working

144
00:13:09,095 --> 00:13:15,009
reasonably well, and they are. Now, let me
just point out, one, common, mistake, that

145
00:13:15,009 --> 00:13:20,042
you can easily make, and, that I make when
I haven't written cool programs for a

146
00:13:20,042 --> 00:13:25,088
little while. If you're a C or programmer
or a Java programmer, you might, think

147
00:13:25,088 --> 00:13:30,026
about, writing assignments, like this. So
I just use the equal sign to write

148
00:13:30,026 --> 00:13:34,059
assignment. That looks completely fine if
you're, if you're familiar with those

149
00:13:34,059 --> 00:13:39,020
languages, or used to programming in those
languages. And now, let's see what happens

150
00:13:39,020 --> 00:13:43,046
when we try to compile this. Oh, it
compiles just fine. And then what happens

151
00:13:43,046 --> 00:13:49,092
when we try to run it. Well it runs
[inaudible] input so let's give it input

152
00:13:49,092 --> 00:13:53,055
and. Then we see that we've run out of
heat. And that looks like an infinite

153
00:13:53,055 --> 00:13:58,026
loop. So we're going around and around the
loop And consuming memory for some reason.

154
00:13:58,026 --> 00:14:02,087
And we'll, we '[laugh] get to that much
later in the class. Why, why this loop

155
00:14:02,087 --> 00:14:08,010
actually ends up consuming memory. But,
clearly, we don't have enough memory, in

156
00:14:08,010 --> 00:14:12,081
the loop, and, and eventually we run out.
And so, so that's a sure sign Of an

157
00:14:12,081 --> 00:14:18,004
infinite look. So what is going on here?
Well the thing is that equals. Equals

158
00:14:18,004 --> 00:14:23,028
operator in cool is the comparison
operators. [inaudible] Well we compared I

159
00:14:23,028 --> 00:14:28,004
with O and that returns a boullion. So
these are perfectly valid cool

160
00:14:28,004 --> 00:14:33,014
expressions. They just happen to be
boullions. So, you don't ever actually I

161
00:14:33,014 --> 00:14:38,051
or factorial in this program. Your just
comparing fact with factoid body and I

162
00:14:38,051 --> 00:14:43,061
with I minus one and the program is
perfectly happy to do that. It just

163
00:14:43,061 --> 00:14:49,001
doesn't compute the factorial function.
And it never terminates, because I never

164
00:14:49,001 --> 00:14:54,014
reaches zero. So that concludes our
factorial example. And we'll do one more

165
00:14:54,014 --> 00:14:59,034
example next time of a more complicated,
of a, of a cool program with some

166
00:14:59,034 --> 00:15:01,025
non-trivial data structures.
